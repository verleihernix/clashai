{"custom":{},"modules":{"clashai.js":{"classes":[{"data":{"name":"index","abstract":false,"constructor":{"name":"default","description":"Creates a new `Client`.","see":[],"static":false,"private":false,"examples":["```ts\nconst gpt = new Client(\"your clash ai api key\", \"chatgpt-4o-latest\");\r\n(async () => {\r\n   const response = await gpt.makeRequest(\"Hello, how are you?\", [{ role: \"system\", content: \"You are a friendly chatbot.\" }]);\r\n   console.log(response.choices[0].message.content);\r\n})();\n```"],"abstract":false,"deprecated":false,"parameters":[{"name":"api_key","description":"Your ClashAI API key","optional":false,"default":null,"type":"string","rawType":["string"]},{"name":"model","description":"The model to use for generating completions.","optional":false,"default":null,"type":"Models","rawType":["Models"]}],"returns":{"type":"default","rawType":["default"],"description":null},"metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":315,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L315"},"constructor":"new default"},"metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":212,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L212"},"deprecated":false,"description":"A class for interacting with the ClashAI API.","extends":"EventEmitter","implements":null,"rawExtends":["EventEmitter"],"rawImplements":null,"methods":[{"name":"#get_user_history","description":"Gets the conversation history for a user.","see":[],"static":false,"private":true,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"user_id","description":"The unique identifier for the user.","optional":false,"default":null,"type":"string","rawType":["string"]}],"returns":{"type":"undefined | Array<Messages>","rawType":["undefined","Array","<","Messages",">"],"description":null},"metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":255,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L255"}},{"name":"[captureRejectionSymbol]","description":null,"see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"error","description":null,"optional":false,"default":null,"type":"Error","rawType":["Error"]},{"name":"event","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"args","description":null,"optional":false,"default":null,"type":"AnyRest","rawType":["AnyRest"]}],"returns":{"type":"void","rawType":["void"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":135}},{"name":"addListener","description":"Alias for `emitter.on(eventName, listener)`.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":null,"optional":false,"default":null,"type":"(args: Array<any>) => void","rawType":["(","args: Array,<,any,>",")"," ","=>"," ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":570}},{"name":"emit","description":null,"see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"event","description":"The event to emit.","optional":false,"default":null,"type":"K","rawType":["K"]},{"name":"args","description":"The arguments to pass to the event listener.","optional":false,"default":null,"type":"Parameters<ClientEvents[K]>","rawType":["Parameters","<","ClientEvents","[","K","]",">"]}],"returns":{"type":"boolean","rawType":["boolean"],"description":null},"metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":296,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L296"}},{"name":"eventNames","description":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.\n\n```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[],"returns":{"type":"Array<string | symbol>","rawType":["Array","<","string","symbol",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":895}},{"name":"getMaxListeners","description":"Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to defaultMaxListeners.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[],"returns":{"type":"number","rawType":["number"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":747}},{"name":"getUsage","description":"Returns the statistics of a specific user.","see":[],"static":false,"private":false,"examples":["```ts\nconst client = new Client(\"your clash ai api key\", \"chatgpt-4o-latest\");\r\nconst stats = await client.getUsage(\"your user id\");\n```"],"abstract":false,"deprecated":false,"parameters":[{"name":"user_id","description":"The unique identifier for the user.","optional":false,"default":null,"type":"string","rawType":["string"]}],"returns":{"type":"Promise<null | StatsResultResponse>","rawType":["Promise","<","null","StatsResultResponse",">"],"description":"- The statistics of the user. `Null` if an error occurs."},"metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":379,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L379"}},{"name":"listenerCount","description":"Returns the number of listeners listening for the event named `eventName`.\nIf `listener` is provided, it will return how many times the listener is found\nin the list of the listeners of the event.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":"The name of the event being listened for","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":"The event handler function","optional":true,"default":null,"type":"Function","rawType":["Function"]}],"returns":{"type":"number","rawType":["number"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":841}},{"name":"listeners","description":"Returns a copy of the array of listeners for the event named `eventName`.\n\n```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"Array<Function>","rawType":["Array","<","Function",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":760}},{"name":"makeRequest","description":"Asks the model a question and returns the response.","see":[],"static":false,"private":false,"examples":["```ts\nconst client = new Client(\"your clash ai api key\", \"gpt-4o\");\r\nconst response = await client.makeRequest([{ role: \"system\", content: \"You are a friendly chatbot.\" }, { role: \"user\", content: \"Hello, how are you?\" }]);\n```"],"abstract":false,"deprecated":false,"parameters":[{"name":"messages","description":"Format to modify the personality of the model, the question and other things.","optional":false,"default":null,"type":"Array<Messages>","rawType":["Array","<","Messages",">"]},{"name":"user_id","description":"The unique identifier for the user.","optional":true,"default":null,"type":"string","rawType":["string"]}],"returns":{"type":"Promise<null | Response>","rawType":["Promise","<","null","Response",">"],"description":"- The response from the model. `Null` if an error occurs."},"metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":338,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L338"}},{"name":"off","description":"Alias for `emitter.removeListener()`.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":null,"optional":false,"default":null,"type":"(args: Array<any>) => void","rawType":["(","args: Array,<,any,>",")"," ","=>"," ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":720}},{"name":"on","description":null,"see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"event","description":"The event to listen for.","optional":false,"default":null,"type":"K","rawType":["K"]},{"name":"listener","description":"The listener to call when the event is emitted.","optional":false,"default":null,"type":"ClientEvents[K]","rawType":["ClientEvents","[","K","]"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":270,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L270"}},{"name":"once","description":null,"see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"event","description":"The event to listen for.","optional":false,"default":null,"type":"K","rawType":["K"]},{"name":"listener","description":"The listener to call when the event is emitted.","optional":false,"default":null,"type":"ClientEvents[K]","rawType":["ClientEvents","[","K","]"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":283,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L283"}},{"name":"prependListener","description":"Adds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`\nand `listener` will result in the `listener` being added, and called, multiple times.\n\n```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":"The name of the event.","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":"The callback function","optional":false,"default":null,"type":"(args: Array<any>) => void","rawType":["(","args: Array,<,any,>",")"," ","=>"," ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":859}},{"name":"prependOnceListener","description":"Adds a **one-time**`listener` function for the event named `eventName` to the _beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.\n\n```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":"The name of the event.","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":"The callback function","optional":false,"default":null,"type":"(args: Array<any>) => void","rawType":["(","args: Array,<,any,>",")"," ","=>"," ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":875}},{"name":"rawListeners","description":"Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).\n\n```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"Array<Function>","rawType":["Array","<","Function",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":791}},{"name":"removeAllListeners","description":"Removes all listeners, or those of the specified `eventName`.\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the `EventEmitter` instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":true,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":731}},{"name":"removeListener","description":"Removes the specified `listener` from the listener array for the event named `eventName`.\n\n```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```\n\n`removeListener()` will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified `eventName`, then `removeListener()` must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any `removeListener()` or `removeAllListeners()` calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from`emit()` in progress. Subsequent events behave as expected.\n\n```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe `emitter.listeners()` method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), `removeListener()` will remove the most\nrecently added instance. In the example the `once('ping')` listener is removed:\n\n```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"listener","description":null,"optional":false,"default":null,"type":"(args: Array<any>) => void","rawType":["(","args: Array,<,any,>",")"," ","=>"," ","void"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":715}},{"name":"setMaxListeners","description":"By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to `Infinity` (or `0`) to indicate an unlimited number of listeners.\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.","see":[],"static":false,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"n","description":null,"optional":false,"default":null,"type":"number","rawType":["number"]}],"returns":{"type":"this","rawType":["this"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":741}},{"name":"addAbortListener","description":"Listens once to the `abort` event on the provided `signal`.\n\nListening to the `abort` event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using `AbortSignal`s in Node.js APIs by solving these\ntwo issues by listening to the event such that `stopImmediatePropagation` does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"signal","description":null,"optional":false,"default":null,"type":"AbortSignal","rawType":["AbortSignal"]},{"name":"resource","description":null,"optional":false,"default":null,"type":"(event: Event) => void","rawType":["(","event: Event",")"," ","=>"," ","void"]}],"returns":{"type":"Disposable","rawType":["Disposable"],"description":"Disposable that removes the `abort` listener."},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":410}},{"name":"getEventListeners","description":"Returns a copy of the array of listeners for the event named `eventName`.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"emitter","description":null,"optional":false,"default":null,"type":"EventEmitter<DefaultEventMap> | EventTarget","rawType":["EventEmitter","<","DefaultEventMap",">","EventTarget"]},{"name":"name","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"Array<Function>","rawType":["Array","<","Function",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":331}},{"name":"getMaxListeners","description":"Returns the currently set max amount of listeners.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.getMaxListeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"emitter","description":null,"optional":false,"default":null,"type":"EventEmitter<DefaultEventMap> | EventTarget","rawType":["EventEmitter","<","DefaultEventMap",">","EventTarget"]}],"returns":{"type":"number","rawType":["number"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":360}},{"name":"listenerCount","description":"A class method that returns the number of listeners for the given `eventName` registered on the given `emitter`.\n\n```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":true,"parameters":[{"name":"emitter","description":"The emitter to query","optional":false,"default":null,"type":"EventEmitter<DefaultEventMap>","rawType":["EventEmitter","<","DefaultEventMap",">"]},{"name":"eventName","description":"The event name","optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]}],"returns":{"type":"number","rawType":["number"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":303}},{"name":"on","description":"```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"emitter","description":null,"optional":false,"default":null,"type":"EventEmitter<DefaultEventMap>","rawType":["EventEmitter","<","DefaultEventMap",">"]},{"name":"eventName","description":"The name of the event being listened for","optional":false,"default":null,"type":"string","rawType":["string"]},{"name":"options","description":null,"optional":true,"default":null,"type":"StaticEventEmitterOptions","rawType":["StaticEventEmitterOptions"]}],"returns":{"type":"AsyncIterableIterator<any>","rawType":["AsyncIterableIterator","<","any",">"],"description":"An `AsyncIterator` that iterates `eventName` events emitted by the `emitter`"},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":281}},{"name":"once","description":"Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```\n\nThe special handling of the `'error'` event is only used when `events.once()` is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"emitter","description":null,"optional":false,"default":null,"type":"EventEmitter<DefaultEventMap>","rawType":["EventEmitter","<","DefaultEventMap",">"]},{"name":"eventName","description":null,"optional":false,"default":null,"type":"string | symbol","rawType":["string","symbol"]},{"name":"options","description":null,"optional":true,"default":null,"type":"Pick<StaticEventEmitterOptions, 'signal'>","rawType":["Pick","<","StaticEventEmitterOptions","'","signal","'",">"]}],"returns":{"type":"Promise<Array<any>>","rawType":["Promise","<","Array","<","any",">",">"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":216}},{"name":"setMaxListeners","description":"```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```","see":[],"static":true,"private":false,"examples":[],"abstract":false,"deprecated":false,"parameters":[{"name":"n","description":"A non-negative number. The maximum number of listeners per `EventTarget` event.","optional":true,"default":null,"type":"number","rawType":["number"]},{"name":"eventTargets","description":null,"optional":false,"default":null,"type":"Array<EventEmitter<DefaultEventMap> | EventTarget>","rawType":["Array","<","EventEmitter","<","DefaultEventMap",">","EventTarget",">"]}],"returns":{"type":"void","rawType":["void"],"description":null},"metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":375}}],"private":false,"properties":[{"abstract":false,"default":null,"deprecated":false,"description":"The API key used to authenticate with the ClashAI API.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":219,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L219"},"name":"#api_key","private":true,"readonly":false,"see":[],"static":false,"type":"string"},{"abstract":false,"default":"'http://clashai.3utilities.com:25621'","deprecated":false,"description":"The base URL for the ClashAI API.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":232,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L232"},"name":"#base_url","private":true,"readonly":false,"see":[],"static":false,"type":"string"},{"abstract":false,"default":null,"deprecated":false,"description":"The model used for generating completions.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":225,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L225"},"name":"#model","private":true,"readonly":false,"see":[],"static":false,"type":"Models"},{"abstract":false,"default":"...","deprecated":false,"description":"A map of user IDs to their conversation history.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":238,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L238"},"name":"#user_histories","private":true,"readonly":false,"see":[],"static":false,"type":"Map<string, Array<Messages>>"},{"abstract":false,"default":null,"deprecated":false,"description":"Value: `Symbol.for('nodejs.rejection')`\n\nSee how to write a custom `rejection handler`.","metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":425},"name":"captureRejectionSymbol","private":false,"readonly":true,"see":[],"static":true,"type":"(typeof captureRejectionSymbol)"},{"abstract":false,"default":null,"deprecated":false,"description":"Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default `captureRejections` option on all new `EventEmitter` objects.","metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":432},"name":"captureRejections","private":false,"readonly":false,"see":[],"static":true,"type":"boolean"},{"abstract":false,"default":null,"deprecated":false,"description":"By default, a maximum of `10` listeners can be registered for any single\nevent. This limit can be changed for individual `EventEmitter` instances\nusing the `emitter.setMaxListeners(n)` method. To change the default\nfor _all_`EventEmitter` instances, the `events.defaultMaxListeners` property\ncan be used. If this value is not a positive number, a `RangeError` is thrown.\n\nTake caution when setting the `events.defaultMaxListeners` because the\nchange affects _all_ `EventEmitter` instances, including those created before\nthe change is made. However, calling `emitter.setMaxListeners(n)` still has\nprecedence over `events.defaultMaxListeners`.\n\nThis is not a hard limit. The `EventEmitter` instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n`EventEmitter`, the `emitter.getMaxListeners()` and `emitter.setMaxListeners()` methods can be used to\ntemporarily avoid this warning:\n\n```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```\n\nThe `--trace-warnings` command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with `process.on('warning')` and will\nhave the additional `emitter`, `type`, and `count` properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts `name` property is set to `'MaxListenersExceededWarning'`.","metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":471},"name":"defaultMaxListeners","private":false,"readonly":false,"see":[],"static":true,"type":"number"},{"abstract":false,"default":null,"deprecated":false,"description":"This symbol shall be used to install a listener for only monitoring `'error'` events. Listeners installed using this symbol are called before the regular `'error'` listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an `'error'` event is emitted. Therefore, the process will still crash if no\nregular `'error'` listener is installed.","metadata":{"name":"events.d.ts","directory":"node_modules/@types/node","line":418},"name":"errorMonitor","private":false,"readonly":true,"see":[],"static":true,"type":"(typeof errorMonitor)"},{"abstract":false,"default":null,"deprecated":false,"description":"Returns the user histories map.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":244,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L244"},"name":"user_histories","private":false,"readonly":false,"see":[],"static":false,"type":"Map<string, Array<Messages>>"}],"see":[]},"markdown":[{"name":"index","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":212,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L212"},"content":"## index extends [EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter)\nA class for interacting with the ClashAI API.\n\n\n\n```typescript\nnew default(api_key, model)\n```\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| api_key | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) | ❌ | Your ClashAI API key |\n| model | Models | ❌ | The model to use for generating completions. |\n\n\n## Properties\n### private #api_key: any\nThe API key used to authenticate with the ClashAI API.\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L219)\n### private #base_url: any\nThe base URL for the ClashAI API.\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L232)\n### private #model: any\nThe model used for generating completions.\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L225)\n### private #user_histories: any\nA map of user IDs to their conversation history.\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L238)\n### public static captureRejectionSymbol: any\nValue: `Symbol.for('nodejs.rejection')`\n\nSee how to write a custom `rejection handler`.\n### public static captureRejections: any\nValue: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default `captureRejections` option on all new `EventEmitter` objects.\n### public static defaultMaxListeners: any\nBy default, a maximum of `10` listeners can be registered for any single\nevent. This limit can be changed for individual `EventEmitter` instances\nusing the `emitter.setMaxListeners(n)` method. To change the default\nfor _all_`EventEmitter` instances, the `events.defaultMaxListeners` property\ncan be used. If this value is not a positive number, a `RangeError` is thrown.\n\nTake caution when setting the `events.defaultMaxListeners` because the\nchange affects _all_ `EventEmitter` instances, including those created before\nthe change is made. However, calling `emitter.setMaxListeners(n)` still has\nprecedence over `events.defaultMaxListeners`.\n\nThis is not a hard limit. The `EventEmitter` instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single\n`EventEmitter`, the `emitter.getMaxListeners()` and `emitter.setMaxListeners()` methods can be used to\ntemporarily avoid this warning:\n\n```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```\n\nThe `--trace-warnings` command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with `process.on('warning')` and will\nhave the additional `emitter`, `type`, and `count` properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts `name` property is set to `'MaxListenersExceededWarning'`.\n### public static errorMonitor: any\nThis symbol shall be used to install a listener for only monitoring `'error'` events. Listeners installed using this symbol are called before the regular `'error'` listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an `'error'` event is emitted. Therefore, the process will still crash if no\nregular `'error'` listener is installed.\n### public user_histories: any\nReturns the user histories map.\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L244)\n\n## Methods\n### private #get_user_history(user_id): undefined[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<Messages>\nGets the conversation history for a user.\n\n\n\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| user_id | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) | ❌ | The unique identifier for the user. |\n\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L255)\n### public \\[captureRejectionSymbol](error, event, args): [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| error | [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) | ❌ |\n| event | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ |\n| args | AnyRest | ❌ |\n### public addListener(eventName, listener): this\nAlias for `emitter.on(eventName, listener)`.\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ |\n| listener | (args: Array,\\<,any,>) => [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) | ❌ |\n### public emit(event, args): [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| event | K | ❌ | The event to emit. |\n| args | Parameters\\<ClientEvents\\[K]> | ❌ | The arguments to pass to the event listener. |\n\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L296)\n### public eventNames(): [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)>\nReturns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.\n\n```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```\n### public getMaxListeners(): [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\nReturns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to defaultMaxListeners.\n### public getUsage(user_id): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<nullStatsResultResponse>\nReturns the statistics of a specific user.\n\n```ts\nconst client = new Client(\"your clash ai api key\", \"chatgpt-4o-latest\");\r\nconst stats = await client.getUsage(\"your user id\");\n```\n\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| user_id | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) | ❌ | The unique identifier for the user. |\n\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L379)\n### public listenerCount(eventName, listener?): [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\nReturns the number of listeners listening for the event named `eventName`.\nIf `listener` is provided, it will return how many times the listener is found\nin the list of the listeners of the event.\n\n\n\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ | The name of the event being listened for |\n| listener | [Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) | ✅ | The event handler function |\n### public listeners(eventName): [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)>\nReturns a copy of the array of listeners for the event named `eventName`.\n\n```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ |\n### public makeRequest(messages, user_id?): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<null[Response](https://developer.mozilla.org/en-US/docs/Web/API/Response)>\nAsks the model a question and returns the response.\n\n```ts\nconst client = new Client(\"your clash ai api key\", \"gpt-4o\");\r\nconst response = await client.makeRequest([{ role: \"system\", content: \"You are a friendly chatbot.\" }, { role: \"user\", content: \"Hello, how are you?\" }]);\n```\n\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| messages | [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<Messages> | ❌ | Format to modify the personality of the model, the question and other things. |\n| user_id | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) | ✅ | The unique identifier for the user. |\n\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L338)\n### public off(eventName, listener): this\nAlias for `emitter.removeListener()`.\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ |\n| listener | (args: Array,\\<,any,>) => [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) | ❌ |\n### public on(event, listener): this\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| event | K | ❌ | The event to listen for. |\n| listener | ClientEvents\\[K] | ❌ | The listener to call when the event is emitted. |\n\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L270)\n### public once(event, listener): this\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| event | K | ❌ | The event to listen for. |\n| listener | ClientEvents\\[K] | ❌ | The listener to call when the event is emitted. |\n\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L283)\n### public prependListener(eventName, listener): this\nAdds the `listener` function to the _beginning_ of the listeners array for the\nevent named `eventName`. No checks are made to see if the `listener` has\nalready been added. Multiple calls passing the same combination of `eventName`\nand `listener` will result in the `listener` being added, and called, multiple times.\n\n```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.\n\n\n\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ | The name of the event. |\n| listener | (args: Array,\\<,any,>) => [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) | ❌ | The callback function |\n### public prependOnceListener(eventName, listener): this\nAdds a **one-time**`listener` function for the event named `eventName` to the _beginning_ of the listeners array. The next time `eventName` is triggered, this\nlistener is removed, and then invoked.\n\n```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.\n\n\n\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ | The name of the event. |\n| listener | (args: Array,\\<,any,>) => [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) | ❌ | The callback function |\n### public rawListeners(eventName): [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)>\nReturns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).\n\n```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ |\n### public removeAllListeners(eventName?): this\nRemoves all listeners, or those of the specified `eventName`.\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the `EventEmitter` instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ✅ |\n### public removeListener(eventName, listener): this\nRemoves the specified `listener` from the listener array for the event named `eventName`.\n\n```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```\n\n`removeListener()` will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified `eventName`, then `removeListener()` must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any `removeListener()` or `removeAllListeners()` calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from`emit()` in progress. Subsequent events behave as expected.\n\n```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe `emitter.listeners()` method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), `removeListener()` will remove the most\nrecently added instance. In the example the `once('ping')` listener is removed:\n\n```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ |\n| listener | (args: Array,\\<,any,>) => [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) | ❌ |\n### public setMaxListeners(n): this\nBy default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to `Infinity` (or `0`) to indicate an unlimited number of listeners.\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| n | [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) | ❌ |\n### public static addAbortListener(signal, resource): Disposable\nListens once to the `abort` event on the provided `signal`.\n\nListening to the `abort` event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using `AbortSignal`s in Node.js APIs by solving these\ntwo issues by listening to the event such that `stopImmediatePropagation` does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| signal | AbortSignal | ❌ |\n| resource | (event: Event) => [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) | ❌ |\n### public static getEventListeners(emitter, name): [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)>\nReturns a copy of the array of listeners for the event named `eventName`.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| emitter | [EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter)\\<DefaultEventMap>EventTarget | ❌ |\n| name | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ |\n### public static getMaxListeners(emitter): [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\nReturns the currently set max amount of listeners.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.getMaxListeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| emitter | [EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter)\\<DefaultEventMap>EventTarget | ❌ |\n### public static listenerCount(emitter, eventName): [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\nA class method that returns the number of listeners for the given `eventName` registered on the given `emitter`.\n\n```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```\n\n- **⚠️ Deprecated**\n\n\n\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| emitter | [EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter)\\<DefaultEventMap> | ❌ | The emitter to query |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ | The event name |\n### public static on(emitter, eventName, options?): AsyncIterableIterator\\<any>\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```\n\n\n\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| emitter | [EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter)\\<DefaultEventMap> | ❌ | N/A |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) | ❌ | The name of the event being listened for |\n| options | StaticEventEmitterOptions | ✅ | N/A |\n### public static once(emitter, eventName, options?): [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<any>>\nCreates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```\n\nThe special handling of the `'error'` event is only used when `events.once()` is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```\n\n\n\n| Parameter | Type | Optional |\n| ----------- | ----------- | ----------- |\n| emitter | [EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter)\\<DefaultEventMap> | ❌ |\n| eventName | [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)[symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) | ❌ |\n| options | Pick\\<StaticEventEmitterOptions'signal'> | ✅ |\n### public static setMaxListeners(n?, eventTargets): [void](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```\n\n\n\n| Parameter | Type | Optional | Description |\n| ----------- | ----------- | ----------- | ----------- |\n| n | [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) | ✅ | A non-negative number. The maximum number of listeners per `EventTarget` event. |\n| eventTargets | [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\\<[EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter)\\<DefaultEventMap>EventTarget> | ❌ | N/A |"}]}],"functions":[],"name":"clashai.js","types":[{"data":{"deprecated":false,"description":"Represents events that can be emitted by the `Client` class.\r\n- `error`: Emitted when an error occurs.\r\n- `requestMade`: Emitted when a request is made to a model.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":22,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L22"},"name":"ClientEvents","parameters":[],"private":false,"properties":[],"returns":null,"see":[],"type":"{ error: (error: Error) => void | Promise<void>, requestMade: (infos: RequestMadeInfoParams) => void | Promise<void> }"},"markdown":[{"name":"ClientEvents","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":22,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L22"},"content":"## ClientEvents\n\nRepresents events that can be emitted by the `Client` class.\r\n- `error`: Emitted when an error occurs.\r\n- `requestMade`: Emitted when a request is made to a model.\n\n- Type: \\{ error: (error: Error) => void \\| Promise\\<void>, requestMade: (infos: RequestMadeInfoParams) => void \\| Promise\\<void> }\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L22)"}]},{"data":{"deprecated":false,"description":"Represents the structure of the messages in the conversation.\r\n- `role`: The role of the message sender.\r\n- `content`: The content of the message.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":50,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L50"},"name":"Messages","parameters":[],"private":false,"properties":[],"returns":null,"see":[],"type":"{ content: string, role: Role }"},"markdown":[{"name":"Messages","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":50,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L50"},"content":"## Messages\n\nRepresents the structure of the messages in the conversation.\r\n- `role`: The role of the message sender.\r\n- `content`: The content of the message.\n\n- Type: \\{ content: string, role: Role }\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L50)"}]},{"data":{"deprecated":false,"description":"A list of supported models.\r\n- \"gpt-4o\": The GPT-4 OpenAI model.\r\n- \"chatgpt-4o-latest\": The latest version of the ChatGPT model.\r\n- \"gpt-4-turbo\": The GPT-4 Turbo model.\r\n- \"gpt-4o-2024-08-06\": The GPT-4 OpenAI model trained on data up to August 6, 2024.\r\n- \"gpt-4o-mini\": The GPT-4 OpenAI model with fewer parameters.\r\n- \"gpt-4\": The GPT-4 OpenAI model.\r\n- \"hermes-3-llama-3.1-405b\": The Hermes-3 Llama-3.1 model with 405 billion parameters.\r\n- \"gpt-4o-2024-05-13\": The GPT-4 OpenAI model trained on data up to May 13, 2024.\r\n- \"gpt-4o-mini-2024-07-18\": The GPT-4 OpenAI model with fewer parameters trained on data up to July 18, 2024.\r\n- \"llama-3.1-405b-instruct\": The Llama-3.1 model with 405 billion parameters and instruction-based training.\r\n- \"qwen-2-7b-instruct\": The Qwen-2 model with 7 billion parameters and instruction-based training.\r\n- \"nous-capybara-7b\": The Nous Capybara model with 7 billion parameters.\r\n- \"phi-3-medium-128k-instruct\": The Phi-3 model with medium size and instruction-based training.\r\n- \"openchat-7b\": The OpenChat model with 7 billion parameters.\r\n- \"llama-3.1-70b-instruct\": The Llama-3.1 model with 70 billion parameters and instruction-based training.\r\n- \"toppy-m-7b\": The Toppy-M model with 7 billion parameters.\r\n- \"gemma-7b-it\": The Gemma model with 7 billion parameters and instruction-based training.\r\n- \"mythomist-7b\": The Mythomist model with 7 billion parameters.\r\n- \"phi-3-mini-128k-instruct\": The Phi-3 model with mini size and instruction-based training.\r\n- \"gemma-2-9b-it\": The Gemma-2 model with 9 billion parameters and instruction-based training.\r\n- \"llama-3-8b-instruct\": The Llama-3 model with 8 billion parameters and instruction-based training.\r\n- \"mixtral-8x22b-v0.1\": The Mixtral model with 8x22 billion parameters and version 0.1.\r\n- \"mixtral-8x22b-instruct-v0.1\": The Mixtral model with 8x22 billion parameters, instruction-based training, and version 0.1.\r\n- \"llama-3-70b-instruct\": The Llama-3 model with 70 billion parameters and instruction-based training.\r\n- \"llama-2-70b-chat-hf\": The Llama-2 model with 70 billion parameters for chat and high-frequency prompts.\r\n- \"llama-2-13b-chat-hf\": The Llama-2 model with 13 billion parameters for chat and high-frequency prompts.\r\n- \"llama-2-7b-chat-hf\": The Llama-2 model with 7 billion parameters for chat and high-frequency prompts.\r\n- \"zephyr-7b-beta\": The Zephyr model with 7 billion parameters in beta.\r\n- \"llama-3.1-8b-instruct\": The Llama-3.1 model with 8 billion parameters and instruction-based training.\r\n- \"mixtral-8x7b-instruct-v0.1\": The Mixtral model with 8x7 billion parameters, instruction-based training, and version 0.1.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":174,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L174"},"name":"Models","parameters":[],"private":false,"properties":[],"returns":null,"see":[],"type":"'gpt-4o' | 'chatgpt-4o-latest' | 'gpt-4-turbo' | 'gpt-4o-2024-08-06' | 'gpt-4o-mini' | 'gpt-4' | 'hermes-3-llama-3.1-405b' | 'gpt-4o-2024-05-13' | 'gpt-4o-mini-2024-07-18' | 'llama-3.1-405b-instruct' | 'qwen-2-7b-instruct' | 'nous-capybara-7b' | 'phi-3-medium-128k-instruct' | 'openchat-7b' | 'llama-3.1-70b-instruct' | 'toppy-m-7b' | 'gemma-7b-it' | 'mythomist-7b' | 'phi-3-mini-128k-instruct' | 'gemma-2-9b-it' | 'llama-3-8b-instruct' | 'mixtral-8x22b-v0.1' | 'mixtral-8x22b-instruct-v0.1' | 'llama-3-70b-instruct' | 'llama-2-70b-chat-hf' | 'llama-2-13b-chat-hf' | 'llama-2-7b-chat-hf' | 'zephyr-7b-beta' | 'llama-3.1-8b-instruct' | 'mixtral-8x7b-instruct-v0.1'"},"markdown":[{"name":"Models","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":174,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L174"},"content":"## Models\n\nA list of supported models.\r\n- \"gpt-4o\": The GPT-4 OpenAI model.\r\n- \"chatgpt-4o-latest\": The latest version of the ChatGPT model.\r\n- \"gpt-4-turbo\": The GPT-4 Turbo model.\r\n- \"gpt-4o-2024-08-06\": The GPT-4 OpenAI model trained on data up to August 6, 2024.\r\n- \"gpt-4o-mini\": The GPT-4 OpenAI model with fewer parameters.\r\n- \"gpt-4\": The GPT-4 OpenAI model.\r\n- \"hermes-3-llama-3.1-405b\": The Hermes-3 Llama-3.1 model with 405 billion parameters.\r\n- \"gpt-4o-2024-05-13\": The GPT-4 OpenAI model trained on data up to May 13, 2024.\r\n- \"gpt-4o-mini-2024-07-18\": The GPT-4 OpenAI model with fewer parameters trained on data up to July 18, 2024.\r\n- \"llama-3.1-405b-instruct\": The Llama-3.1 model with 405 billion parameters and instruction-based training.\r\n- \"qwen-2-7b-instruct\": The Qwen-2 model with 7 billion parameters and instruction-based training.\r\n- \"nous-capybara-7b\": The Nous Capybara model with 7 billion parameters.\r\n- \"phi-3-medium-128k-instruct\": The Phi-3 model with medium size and instruction-based training.\r\n- \"openchat-7b\": The OpenChat model with 7 billion parameters.\r\n- \"llama-3.1-70b-instruct\": The Llama-3.1 model with 70 billion parameters and instruction-based training.\r\n- \"toppy-m-7b\": The Toppy-M model with 7 billion parameters.\r\n- \"gemma-7b-it\": The Gemma model with 7 billion parameters and instruction-based training.\r\n- \"mythomist-7b\": The Mythomist model with 7 billion parameters.\r\n- \"phi-3-mini-128k-instruct\": The Phi-3 model with mini size and instruction-based training.\r\n- \"gemma-2-9b-it\": The Gemma-2 model with 9 billion parameters and instruction-based training.\r\n- \"llama-3-8b-instruct\": The Llama-3 model with 8 billion parameters and instruction-based training.\r\n- \"mixtral-8x22b-v0.1\": The Mixtral model with 8x22 billion parameters and version 0.1.\r\n- \"mixtral-8x22b-instruct-v0.1\": The Mixtral model with 8x22 billion parameters, instruction-based training, and version 0.1.\r\n- \"llama-3-70b-instruct\": The Llama-3 model with 70 billion parameters and instruction-based training.\r\n- \"llama-2-70b-chat-hf\": The Llama-2 model with 70 billion parameters for chat and high-frequency prompts.\r\n- \"llama-2-13b-chat-hf\": The Llama-2 model with 13 billion parameters for chat and high-frequency prompts.\r\n- \"llama-2-7b-chat-hf\": The Llama-2 model with 7 billion parameters for chat and high-frequency prompts.\r\n- \"zephyr-7b-beta\": The Zephyr model with 7 billion parameters in beta.\r\n- \"llama-3.1-8b-instruct\": The Llama-3.1 model with 8 billion parameters and instruction-based training.\r\n- \"mixtral-8x7b-instruct-v0.1\": The Mixtral model with 8x7 billion parameters, instruction-based training, and version 0.1.\n\n- Type: 'gpt\\-4o' \\| 'chatgpt\\-4o\\-latest' \\| 'gpt\\-4\\-turbo' \\| 'gpt\\-4o\\-2024\\-08\\-06' \\| 'gpt\\-4o\\-mini' \\| 'gpt\\-4' \\| 'hermes\\-3\\-llama\\-3.1\\-405b' \\| 'gpt\\-4o\\-2024\\-05\\-13' \\| 'gpt\\-4o\\-mini\\-2024\\-07\\-18' \\| 'llama\\-3.1\\-405b\\-instruct' \\| 'qwen\\-2\\-7b\\-instruct' \\| 'nous\\-capybara\\-7b' \\| 'phi\\-3\\-medium\\-128k\\-instruct' \\| 'openchat\\-7b' \\| 'llama\\-3.1\\-70b\\-instruct' \\| 'toppy\\-m\\-7b' \\| 'gemma\\-7b\\-it' \\| 'mythomist\\-7b' \\| 'phi\\-3\\-mini\\-128k\\-instruct' \\| 'gemma\\-2\\-9b\\-it' \\| 'llama\\-3\\-8b\\-instruct' \\| 'mixtral\\-8x22b\\-v0.1' \\| 'mixtral\\-8x22b\\-instruct\\-v0.1' \\| 'llama\\-3\\-70b\\-instruct' \\| 'llama\\-2\\-70b\\-chat\\-hf' \\| 'llama\\-2\\-13b\\-chat\\-hf' \\| 'llama\\-2\\-7b\\-chat\\-hf' \\| 'zephyr\\-7b\\-beta' \\| 'llama\\-3.1\\-8b\\-instruct' \\| 'mixtral\\-8x7b\\-instruct\\-v0.1'\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L174)"}]},{"data":{"deprecated":false,"description":null,"metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":6,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L6"},"name":"RequestMadeInfoParams","parameters":[],"private":false,"properties":[],"returns":null,"see":[],"type":"{ messages: Array<Messages> | undefined, user_id: string | undefined }"},"markdown":[{"name":"RequestMadeInfoParams","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":6,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L6"},"content":"## RequestMadeInfoParams\n\n- Type: \\{ messages: Array\\<Messages> \\| undefined, user_id: string \\| undefined }\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L6)"}]},{"data":{"deprecated":false,"description":"Represents the structure of the Response from a request to the `/chat/completions` endpoint.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":67,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L67"},"name":"Response","parameters":[],"private":false,"properties":[],"returns":null,"see":[],"type":"{ choices: Array<{ finish_reason: string, index: number, logprobs: string, message: { content: string } }>, created: number, id: string, model: string, object: string, system_fingerprint: string | null, usage: { completion_tokens: number, prompt_tokens: number, total_tokens: number } }"},"markdown":[{"name":"Response","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":67,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L67"},"content":"## Response\n\nRepresents the structure of the Response from a request to the `/chat/completions` endpoint.\n\n- Type: \\{ choices: Array\\<\\{ finish_reason: string, index: number, logprobs: string, message: \\{ content: string } }>, created: number, id: string, model: string, object: string, system_fingerprint: string \\| null, usage: \\{ completion_tokens: number, prompt_tokens: number, total_tokens: number } }\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L67)"}]},{"data":{"deprecated":false,"description":"Defines the possible roles in a conversation.\r\n- \"user\": The person interacting with the model.\r\n- \"system\": The system or administrative messages.\r\n- \"assistant\": The model's responses.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":43,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L43"},"name":"Role","parameters":[],"private":false,"properties":[],"returns":null,"see":[],"type":"'user' | 'system' | 'assistant'"},"markdown":[{"name":"Role","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":43,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L43"},"content":"## Role\n\nDefines the possible roles in a conversation.\r\n- \"user\": The person interacting with the model.\r\n- \"system\": The system or administrative messages.\r\n- \"assistant\": The model's responses.\n\n- Type: 'user' \\| 'system' \\| 'assistant'\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L43)"}]},{"data":{"deprecated":false,"description":"Represents the structure of the StatsResultResponse from a request to the `/my_stats` endpoint.","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":117,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L117"},"name":"StatsResultResponse","parameters":[],"private":false,"properties":[],"returns":null,"see":[],"type":"{ result: { message: string, requests_all_time: number, requests_this_minute: number, user_id: string | number } }"},"markdown":[{"name":"StatsResultResponse","metadata":{"name":"index.ts","directory":"Desktop/Privat/Coding Projekte/clashai/src","line":117,"url":"https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L117"},"content":"## StatsResultResponse\n\nRepresents the structure of the StatsResultResponse from a request to the `/my_stats` endpoint.\n\n- Type: \\{ result: \\{ message: string, requests_all_time: number, requests_this_minute: number, user_id: string \\| number } }\n\n- [Source](https://github.com/verleihernix/clashai/blob/580221aa13f2b13b59c03a36a2ac2c0e7c4a03b8/src/index.ts#L117)"}]}],"enum":[],"variables":[]}},"metadata":{"generationMs":3274.1563000000006,"timestamp":1724765283521}}